---
import MainLayout from "../layouts/MainLayout.astro";
import Footer from "../components/Footer.astro";
import ChatbotToggle from "../components/ChatbotToggle.astro";
import AOSInit from "../components/AOSInit.astro";
import CenterCard from "../components/CenterCard.astro";
import Map from "../components/Map.astro";
import centersData from "../data/centers.json";

// Read search params
const { searchParams } = Astro.url;
const sort = searchParams.get('sort') || 'price';
const page = parseInt(searchParams.get('page') || '1');
const study = searchParams.get('study') || 'MRI';
const city = searchParams.get('city') || '';
const scanType = searchParams.get('scanType') || '';
const bodyArea = searchParams.get('bodyArea') || '';

// Filter centers
let filteredCenters = centersData.filter(center => {
  if (!center.studies_offered.includes(study)) return false;
  if (city && center.city !== city) return false;
  if (scanType && !center.scan_types_available.includes(scanType)) return false;
  if (bodyArea && !center.body_parts.some(part => part.toLowerCase().includes(bodyArea.toLowerCase()))) return false;
  return true;
});

// Mock distances
filteredCenters = filteredCenters.map(center => ({
  ...center,
  distance: (Math.random() * 29 + 1).toFixed(1),
}));

// Sort centers
if (sort === 'price') {
  filteredCenters.sort((a, b) => a.prices[study] - b.prices[study]);
} else if (sort === 'distance') {
  filteredCenters.sort((a, b) => parseFloat(a.distance) - parseFloat(b.distance));
}

// Pagination
const centersPerPage = 10;
const totalPages = Math.ceil(filteredCenters.length / centersPerPage);
const startIndex = (page - 1) * centersPerPage;
const endIndex = startIndex + centersPerPage;
const paginatedCenters = filteredCenters.slice(startIndex, endIndex);

// Helpers
function getPaginationUrl(pageNum) {
  const url = new URL(Astro.request.url);
  url.searchParams.set('page', pageNum.toString());
  return url.pathname + url.search;
}

function getSortUrl(sortType) {
  const url = new URL(Astro.request.url);
  url.searchParams.set('sort', sortType);
  url.searchParams.set('page', '1');
  return url.pathname + url.search;
}
---

<MainLayout>
  <slot slot="title">Search Results | USRad</slot>
  <AOSInit />

  <div class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <section class="text-center mb-10" data-aos="fade-up">
      <h1 class="text-3xl font-bold text-[#003087] mb-2">Available Centers Near You</h1>
      <p class="text-gray-600 max-w-3xl mx-auto">
        Compare trusted imaging centers, review rates, and schedule your scan today.
      </p>
    </section>

    {filteredCenters.length === 0 ? (
      <div class="text-center py-12" data-aos="fade-up">
        <div class="bg-gray-50 rounded-xl p-8 max-w-2xl mx-auto">
          <h2 class="text-xl font-semibold text-gray-800 mb-2">No Centers Found</h2>
          <p class="text-gray-600 mb-6">We couldn't find any centers matching your search. Please adjust your filters.</p>
          <a href="/locations" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition">
            Back to Search
          </a>
        </div>
      </div>
    ) : (
      <div class="flex flex-col lg:flex-row gap-6">

        <!-- Map + Center List -->
        <div class="lg:w-2/3 order-2 lg:order-1" data-aos="fade-up">
          <!-- Sort Controls -->
          <div class="flex justify-end mb-4">
            <select
              id="sortOrder"
              name="sortOrder"
              class="appearance-none bg-white border border-gray-300 rounded-md py-2 pl-3 pr-10 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              onchange="window.location.href=this.value"
            >
              <option value={getSortUrl('price')} selected={sort === 'price'}>Sort by: Price</option>
              <option value={getSortUrl('distance')} selected={sort === 'distance'}>Sort by: Distance</option>
            </select>
          </div>

          <!-- Map -->
          <div class="mb-6" data-aos="fade-up">
            <Map
              centers={paginatedCenters.map(center => ({
                id: center.id ?? 0,
                name: center.name ?? 'Unknown Center',
                latitude: center.latitude ?? 0,
                longitude: center.longitude ?? 0,
                price: center.prices?.[study] ?? 0,
                study: study
              }))}
            />
          </div>

          <!-- Centers List -->
          <div class="space-y-4 mb-8">
            {paginatedCenters.map((center) => (
              <CenterCard
                id={center.id}
                name={center.name}
                city={center.city}
                state={center.state}
                distance={center.distance}
                price={center.prices[study]}
                study={study}
                availability={center.appointment_availability}
                bodyArea={bodyArea}
                scanType={scanType}
              />
            ))}
          </div>

          <!-- Pagination -->
          {totalPages > 1 && (
            <div class="flex justify-center items-center space-x-4 mt-8">
              <a href={page > 1 ? getPaginationUrl(page - 1) : '#'} class="px-4 py-2 rounded-md bg-gray-100 hover:bg-gray-200 text-gray-800">
                Previous
              </a>
              <span class="text-gray-600 font-medium">Page {page} of {totalPages}</span>
              <a href={page < totalPages ? getPaginationUrl(page + 1) : '#'} class="px-4 py-2 rounded-md bg-gray-100 hover:bg-gray-200 text-gray-800">
                Next
              </a>
            </div>
          )}
        </div>

        <!-- Sidebar -->
        <div class="lg:w-1/3 order-1 lg:order-2" data-aos="fade-up" data-aos-delay="100">
          <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <h2 class="text-lg font-semibold text-gray-800 mb-4">Your Search</h2>
            <div class="space-y-3">
              <div><span class="text-gray-500 text-sm">Scan Type:</span><p class="font-medium">{study}</p></div>
              {bodyArea && <div><span class="text-gray-500 text-sm">Body Area:</span><p class="font-medium">{bodyArea}</p></div>}
              {scanType && <div><span class="text-gray-500 text-sm">Scan Details:</span><p class="font-medium">{scanType}</p></div>}
              {city && <div><span class="text-gray-500 text-sm">Location:</span><p class="font-medium">{city}</p></div>}
              <div class="pt-4">
                <a href="/locations" class="text-blue-600 hover:text-blue-700 text-sm flex items-center">
                  Modify Search
                </a>
              </div>
            </div>
          </div>
        </div>

      </div>
    )}
  </div>

  <Footer />
  <ChatbotToggle chatbotLabel="ðŸ’¬ Let's Talk" />
</MainLayout>