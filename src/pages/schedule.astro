---
import MainLayout from "../layouts/MainLayout.astro";
import ChatbotToggle from "../components/ChatbotToggle.astro";
import AOSInit from "../components/AOSInit.astro";

// Import centers and studies data
import centersData from "../data/centers.json";
import studiesData from "../data/studies.json";

// Make data available to client script
const serializedCentersData = JSON.stringify(centersData);
const serializedStudiesData = JSON.stringify(studiesData);
---

<MainLayout>
  <AOSInit />
  <div class="max-w-4xl mx-auto px-4 py-12">
    <!-- Initial loading state -->
    <div id="loading-message" class="text-center py-12">
      <p class="text-lg">Loading...</p>
    </div>

    <!-- No center selected message (hidden initially) -->
    <div
      id="no-center-selected"
      class="text-center py-12 hidden"
      data-aos="fade-up"
    >
      <h1 class="text-3xl font-bold text-gray-800 mb-4">No Center Selected</h1>
      <p class="text-lg text-gray-600 mb-6">
        It seems you haven't selected an imaging center or study type yet.
        Please search for available centers first.
      </p>
      <div class="flex justify-center gap-4">
        <a
          href="/locations"
          class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition"
        >
          Start New Search
        </a>
        <a
          href="/search"
          class="bg-gray-200 text-gray-800 px-6 py-2 rounded-lg hover:bg-gray-300 transition"
        >
          View Search Results
        </a>
      </div>
    </div>

    <!-- Error message (hidden initially) -->
    <div id="error-message" class="text-center py-12 hidden" data-aos="fade-up">
      <h1 class="text-3xl font-bold text-red-600 mb-4">Error Loading Data</h1>
      <p id="error-details" class="text-lg text-gray-600 mb-6">
        There was a problem loading the required data. Please try again later.
      </p>
      <div class="flex justify-center gap-4">
        <a
          href="/locations"
          class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition"
        >
          Start New Search
        </a>
      </div>
    </div>

    <!-- Center info and form (hidden initially) -->
    <div id="appointment-section" class="hidden">
      <h1 class="text-3xl font-bold text-gray-800 mb-4" data-aos="fade-up">
        Schedule Your Appointment
      </h1>

      <!-- Center Information Section -->
      <div
        class="bg-gray-50 rounded-lg p-6 mb-8 border border-gray-200"
        data-aos="fade-up"
        data-aos-delay="100"
      >
        <h2 class="text-xl font-semibold mb-2">Selected Center</h2>
        <div
          id="center-info"
          class="flex flex-col md:flex-row md:items-center justify-between"
        >
          <!-- Center info will be populated here -->
        </div>
      </div>

      <!-- Appointment Form -->
      <form class="space-y-6" data-aos="fade-up" data-aos-delay="200">
        <input type="hidden" id="centerId" name="centerId" value="" />
        <input type="hidden" id="studyType" name="studyType" value="" />
        <input type="hidden" id="centerName" name="centerName" value="" />
        <input type="hidden" id="price" name="price" value="" />

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label
              for="firstName"
              class="block text-sm font-medium text-gray-700 mb-1"
              >First Name</label
            >
            <input
              type="text"
              id="firstName"
              name="firstName"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label
              for="lastName"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Last Name</label
            >
            <input
              type="text"
              id="lastName"
              name="lastName"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        <div>
          <label
            for="email"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Email Address</label
          >
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div>
          <label
            for="phone"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Phone Number</label
          >
          <input
            type="tel"
            id="phone"
            name="phone"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div>
          <label
            for="preferredDate"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Preferred Date</label
          >
          <input
            type="date"
            id="preferredDate"
            name="preferredDate"
            required
            min={new Date().toISOString().split("T")[0]}
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div>
          <label
            for="preferredTime"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Preferred Time</label
          >
          <select
            id="preferredTime"
            name="preferredTime"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="" disabled selected>Select a time</option>
            <option value="morning">Morning (8am - 12pm)</option>
            <option value="afternoon">Afternoon (12pm - 4pm)</option>
            <option value="evening">Evening (4pm - 7pm)</option>
          </select>
        </div>

        <div>
          <label
            for="notes"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Additional Notes (Optional)</label
          >
          <textarea
            id="notes"
            name="notes"
            rows="3"
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          ></textarea>
        </div>

        <div class="pt-4">
          <button
            type="submit"
            class="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition duration-200"
          >
            Request Appointment
          </button>
        </div>
      </form>

      <div
        class="mt-8 text-center text-gray-600"
        data-aos="fade-up"
        data-aos-delay="300"
      >
        <p>
          Need assistance? Call us at <a
            href="tel:800-555-1234"
            class="text-blue-600 font-medium">800-USRAD-24</a
          >
        </p>
      </div>
    </div>
  </div>

  <script define:vars={{ serializedCentersData, serializedStudiesData }}>
    // Client-side JavaScript to handle URL parameters
    document.addEventListener("DOMContentLoaded", () => {
      // Parse URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      const centerId = urlParams.get("center");
      const studyType = urlParams.get("study");
      const bodyArea = urlParams.get("bodyArea");
      const scanType = urlParams.get("scanType");

      // Log values to console for debugging
      console.log("URL Parameters:", {
        centerId,
        studyType,
        bodyArea,
        scanType,
      });

      // Hide loading message
      document.getElementById("loading-message").style.display = "none";

      // Check if parameters exist
      if (!centerId || !studyType) {
        // Show no center selected message
        document
          .getElementById("no-center-selected")
          .classList.remove("hidden");
        return;
      }

      try {
        // Parse the JSON data
        const centersData = JSON.parse(serializedCentersData);
        const studiesData = JSON.parse(serializedStudiesData);

        // Process the data
        processData(
          centersData,
          studiesData,
          centerId,
          studyType,
          bodyArea,
          scanType,
          urlParams
        );
      } catch (error) {
        // Show error message
        document.getElementById("error-message").classList.remove("hidden");
        document.getElementById("error-details").textContent =
          `Error: ${error.message}`;
        console.error("Error processing data:", error);
      }
    });

    function processData(
      centersData,
      studiesData,
      centerId,
      studyType,
      bodyArea,
      scanType,
      urlParams
    ) {
      // Find the center
      const selectedCenter = centersData.find(
        (center) => center.id.toString() === centerId
      );

      // Find the study - more flexible matching
      let selectedStudy = null;

      // Try to find an exact match first
      selectedStudy = studiesData.find((study) => study.id === studyType);

      // If not found, try case-insensitive match on ID
      if (!selectedStudy) {
        selectedStudy = studiesData.find(
          (study) =>
            study.id && study.id.toLowerCase() === studyType.toLowerCase()
        );
      }

      // If still not found, try matching on type
      if (!selectedStudy) {
        selectedStudy = studiesData.find(
          (study) =>
            study.type && study.type.toLowerCase() === studyType.toLowerCase()
        );
      }

      // If still not found, try matching on name
      if (!selectedStudy) {
        selectedStudy = studiesData.find(
          (study) =>
            study.name &&
            study.name.toLowerCase().includes(studyType.toLowerCase())
        );
      }

      // For debugging, create a simple study object if none found
      if (!selectedStudy) {
        console.log("Creating fallback study object for debugging");
        selectedStudy = {
          id: studyType,
          name: studyType.toUpperCase(),
          type: studyType.toUpperCase(),
        };
      }

      // If center not found, show error
      if (!selectedCenter) {
        const errorMsg = `Center with ID ${centerId} not found`;
        document.getElementById("error-message").classList.remove("hidden");
        document.getElementById("error-details").textContent = errorMsg;
        return;
      }

      // Calculate price
      let price = null;

      // Check if center has prices
      if (selectedCenter.prices) {
        // Try several ways to get the price
        if (typeof selectedCenter.prices === "object") {
          // If it's an object, try different keys
          price =
            selectedCenter.prices[studyType] ||
            selectedCenter.prices[studyType.toLowerCase()] ||
            selectedCenter.prices[studyType.toUpperCase()];

          // If study was found, try using its ID
          if (selectedStudy && selectedStudy.id) {
            price = price || selectedCenter.prices[selectedStudy.id];
          }
        } else if (typeof selectedCenter.prices === "number") {
          // If prices is a single number
          price = selectedCenter.prices;
        }
      }

      // Fall back to default price if needed
      if (price === null || price === undefined) {
        price = selectedCenter.defaultPrice || 799; // Fallback price
      }

      // Update hidden form fields
      document.getElementById("centerId").value = centerId;
      document.getElementById("studyType").value = studyType;
      document.getElementById("centerName").value = selectedCenter.name || "";
      document.getElementById("price").value = price || "";

      // Generate center info HTML
      const centerInfoDiv = document.getElementById("center-info");

      const centerDetailsHTML = `
        <div>
          <h3 class="text-lg font-medium text-blue-700">${selectedCenter.name || "Unknown Center"}</h3>
          <p class="text-gray-600">${selectedCenter.address || ""}</p>
          <p class="text-gray-600">${selectedCenter.city || ""}, ${selectedCenter.state || ""} ${selectedCenter.zip || ""}</p>
          <p class="mt-2 text-gray-700">Phone: ${selectedCenter.phone || "N/A"}</p>
        </div>
        <div class="mt-4 md:mt-0">
          ${
            selectedStudy
              ? `
            <div class="text-center md:text-right">
              <p class="text-gray-600">Selected Study:</p>
              <p class="text-lg font-medium">${selectedStudy.name || selectedStudy.type || "Unknown Study"}</p>
              ${
                bodyArea
                  ? `
              <p class="text-gray-600 mt-2">Body Area:</p>
              <p class="text-sm font-medium">${bodyArea}</p>
              `
                  : ""
              }
              ${
                scanType
                  ? `
              <p class="text-gray-600 mt-2">Scan Type:</p>
              <p class="text-sm font-medium">${scanType}</p>
              `
                  : ""
              }
              <p class="text-gray-600 mt-2">Price:</p>
              <p class="text-2xl font-bold text-green-600">$${price}</p>
            </div>
          `
              : `
            <p class="text-gray-600">No study selected or price available</p>
          `
          }
        </div>
      `;

      centerInfoDiv.innerHTML = centerDetailsHTML;

      // Show appointment section
      document.getElementById("appointment-section").classList.remove("hidden");

      // Initialize or refresh AOS animations
      if (typeof AOS !== "undefined") {
        AOS.refresh();
      }
    }
  </script>
  <ChatbotToggle chatbotLabel="💬 Let's Talk" />
</MainLayout>
