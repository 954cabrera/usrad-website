---
interface Center {
  id: number;
  name: string;
  latitude: number;
  longitude: number;
  price: number;
  study?: string;
}

interface Props {
  centers: Center[];
  centerLat?: number;
  centerLng?: number;
  zoom?: number;
}

const {
  centers = [],
  centerLat = 28.5383, 
  centerLng = -81.3792, 
  zoom = 10,
} = Astro.props;
---

<!-- Correct Map container -->
<div id="centers-map" class="w-full h-[400px] rounded-xl border border-gray-200 shadow-sm overflow-hidden"></div>

<!-- Inject centers data separately -->
<script type="application/json" id="centers-data">
  {JSON.stringify(centers)}
</script>

<script>
  import L from "leaflet";
  import "leaflet/dist/leaflet.css";

  delete L.Icon.Default.prototype._getIconUrl;
  L.Icon.Default.mergeOptions({
    iconRetinaUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png",
    iconUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png",
    shadowUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png",
  });

  document.addEventListener("DOMContentLoaded", () => {
    const map = L.map("centers-map").setView([28.5383, -81.3792], 10);

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "&copy; OpenStreetMap contributors",
    }).addTo(map);

    const centersData = JSON.parse(
      document.getElementById("centers-data").textContent
    );

    if (centersData.length > 0) {
      const bounds = L.latLngBounds();

      centersData.forEach((center) => {
        if (!center.latitude || !center.longitude) return;

        L.marker([center.latitude, center.longitude])
          .addTo(map)
          .bindPopup(`<b>${center.name}</b><br>$${center.price}`);

        bounds.extend([center.latitude, center.longitude]);
      });

      if (bounds.isValid() && centersData.length > 1) {
        map.fitBounds(bounds, { padding: [50, 50], maxZoom: 13 });
      }
    }
  });
</script>

<style>
  #centers-map {
    width: 100%;
    height: 400px;
  }
</style>
